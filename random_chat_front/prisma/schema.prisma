generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model friendship {
  id                                  Int      @id(map: "PK_dbd6fb568cd912c5140307075cc") @default(autoincrement())
  accepted                            Boolean  @default(false)
  createdAt                           DateTime @default(now()) @db.Timestamp(6)
  sender_id                           Int?
  receiver_id                         Int?
  users_friendship_sender_idTousers   users?   @relation("friendship_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_86463167c10dc37dbf9d39728bd")
  users_friendship_receiver_idTousers users?   @relation("friendship_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8cced01afb7c006b9643aed97bf")
}

model messages {
  id                                Int      @id(map: "PK_18325f38ae6de43878487eff986") @default(autoincrement())
  content                           String
  date_created                      DateTime @default(now()) @db.Timestamp(6)
  receiver_id                       Int?
  sender_id                         Int?
  room_id                           String?  @db.VarChar(255)
  rooms                             rooms?   @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1dda4fc8dbeeff2ee71f0088ba0")
  users_messages_sender_idTousers   users?   @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_22133395bd13b970ccd0c34ab22")
  users_messages_receiver_idTousers users?   @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_b561864743d235f44e70addc1f5")
}

model rooms {
  id                             String      @id(map: "PK_0368a2d7c215f2d0458a54933f2") @db.VarChar(255)
  sender_id                      Int?
  receiver_id                    Int?
  messages                       messages[]
  users_rooms_receiver_idTousers users?      @relation("rooms_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4e3908821654edfa486d24a028f")
  users_rooms_sender_idTousers   users?      @relation("rooms_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_53745bfa52d5d4c94fd4cd0ccb4")
  user_room                      user_room[]
}

model tokens {
  id         Int       @id(map: "PK_3001e89ada36263dabf1fb6210a") @default(autoincrement())
  token      String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  expired_at DateTime? @default(now()) @db.Timestamp(6)
  userId     Int?
  users      users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_d417e5d35f2434afc4bd48cb4d2")
}

model users {
  id                                       Int               @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(autoincrement())
  name                                     String            @db.VarChar(30)
  email                                    String            @db.VarChar(255)
  age                                      Int
  gender                                   users_gender_enum
  password                                 String            @db.VarChar(255)
  created_at                               DateTime          @default(now()) @db.Date
  friendship_friendship_sender_idTousers   friendship[]      @relation("friendship_sender_idTousers")
  friendship_friendship_receiver_idTousers friendship[]      @relation("friendship_receiver_idTousers")
  messages_messages_sender_idTousers       messages[]        @relation("messages_sender_idTousers")
  messages_messages_receiver_idTousers     messages[]        @relation("messages_receiver_idTousers")
  rooms_rooms_receiver_idTousers           rooms[]           @relation("rooms_receiver_idTousers")
  rooms_rooms_sender_idTousers             rooms[]           @relation("rooms_sender_idTousers")
  tokens                                   tokens[]
  user_room                                user_room[]
}

model user_room {
  room_id String @db.VarChar(255)
  user_id Int
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0ad4c61747e954d746c626e1070")
  rooms   rooms  @relation(fields: [room_id], references: [id], onDelete: Cascade, map: "FK_b61991bf7b0e617ca5ed577bded")

  @@id([room_id, user_id], map: "PK_f55f341d550a156967e16526c6b")
  @@index([user_id], map: "IDX_0ad4c61747e954d746c626e107")
  @@index([room_id], map: "IDX_b61991bf7b0e617ca5ed577bde")
}

enum users_gender_enum {
  m
  f
}
