worker_processes 1;
events {
    worker_connections 1024;
}

http {
    sendfile on;
    upstream next_js {
        server random_chat_front:3000;
    }

    upstream nest_js_api {
        server Random_Chat:3006;  
    }

    upstream nest_js_ws {
        server Random_Chat:3001;  
    }

    server {
        listen 80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;

        ssl_certificate      /etc/nginx/certificate.crt;
        ssl_certificate_key  /etc/nginx/private.key;

        ssl_protocols        TLSv1.2 TLSv1.3;
        ssl_ciphers          HIGH:!aNULL:!MD5;

        # Proxy /api/ requests to NestJS REST API
        location /api/ {
            proxy_pass http://nest_js:3006;  # REST API is running on port 3006
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Proxy /ws/ WebSocket requests to NestJS WebSocket server
        location /ws/ {
            proxy_pass http://nest_js:3001;  # WebSocket server is running on port 3001
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /api/ {
    add_header 'Access-Control-Allow-Origin' '*'; # Use '*' for development or specific domains in production
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
    add_header 'Access-Control-Allow-Credentials' 'true'; # Allow credentials if necessary

    if ($request_method = 'OPTIONS') {
        return 204;
    }

    rewrite ^/api/(.*)$ /$1 break;
    proxy_pass https://nest_js_api;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_ssl_verify off;
}


        location /ws/ {
            rewrite ^/ws/(.*)$ /$1 break;
            proxy_pass http://nest_js_ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_ssl_verify off;
        }
    }
}
